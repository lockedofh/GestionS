from database import DBManager
from typing import List

class ReportsModel(object):

    def retrieve_quarterly_report(self, year:str) -> List[tuple] | str:
        """Generates the groupped invoices report for the indicated year, grouped by quarters
        
        Keyword arguments:
        year        -- year to filter invoices
        Return:     rows generated by the query in case the query was correctly executed. Otherwise returns the error raised
        """
        try:
            conn = DBManager.get_connection()
            cursor = conn.cursor()
            select_query = f"""
            SELECT 
            (CASE 
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('01', '02', '03') THEN 'TRIMESTRE 1'
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('04', '05', '06') THEN 'TRIMESTRE 2'
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('07', '08', '09') THEN 'TRIMESTRE 3'
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('10', '11', '12') THEN 'TRIMESTRE 4'
            END) AS trimestre,
            SUM(BASE) AS base,
            SUM(VAT) AS IVA, 
            SUM(BASE) + SUM(VAT) AS total
            FROM INVOICES
            WHERE strftime('%Y', EFFECTIVE_DATE) = (?)
            GROUP BY 
            (CASE 
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('01', '02', '03') THEN 'TRIMESTRE 1'
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('04', '05', '06') THEN 'TRIMESTRE 2'
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('07', '08', '09') THEN 'TRIMESTRE 3'
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('10', '11', '12') THEN 'TRIMESTRE 4'
            END)
            ORDER BY 
            (CASE 
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('01', '02', '03') THEN 'TRIMESTRE 1'
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('04', '05', '06') THEN 'TRIMESTRE 2'
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('07', '08', '09') THEN 'TRIMESTRE 3'
                WHEN strftime('%m', EFFECTIVE_DATE) IN ('10', '11', '12') THEN 'TRIMESTRE 4'
            END)
            """
            cursor.execute(select_query, (year,))
            rows = cursor.fetchall()
            DBManager.close_connection()
            return rows
        except Exception as error:
            return "An error occured when getting quarterly report for year {year}: {error}"
        
    def retrieve_annual_report(self, year:str) -> List[tuple] | str:
        """Generates the groupped invoices report for the indicated year, grouped by vendors
        
        Keyword arguments:
        year        -- year to filter invoices
        Return:     rows generated by the query in case the query was correctly executed. Otherwise returns the error raised
        """
        try:
            conn = DBManager.get_connection()
            cursor = conn.cursor()
            select_query = """
            SELECT 
            V.NAME VENDOR,
            SUM(I.BASE) AS base,
            SUM(I.VAT) AS IVA, 
            SUM(I.BASE) + SUM(VAT) AS total
            FROM INVOICES I
            INNER JOIN VENDORS V ON V.NIF = I.NIF
            WHERE strftime('%Y', I.EFFECTIVE_DATE) = (?)
            GROUP BY V.NAME
            ORDER BY SUM(I.BASE) + SUM(VAT)
            """
            cursor.execute(select_query, (year,))
            rows = cursor.fetchall()
            DBManager.close_connection()
            return rows
        except Exception as error:
            return "An error occured when getting annual report for year {year}: {error}"
